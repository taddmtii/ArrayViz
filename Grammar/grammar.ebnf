DECIMAL ::= [1-9][0-9]*
HEX ::= '0x' [0-9a-fA-F]+
BINARY ::= '0b' [0-1]+

IDENTIFIER ::= [a-zA-Z_][a-zA-Z0-9_]*

NUMBER ::= DECIMAL |
           HEX |
           BINARY

IF ::= 'if'

WHILE ::= 'while'

PLUS ::= '+'

SUB ::= '-'

MULT ::= '*'

DIV ::= '/'

EQ ::= '='

LSQBRACK ::= '['

RSQBRACK ::= ']'

COMMA ::= ','

UNDERSCORE ::= '_'

number_list ::= NUMBER (COMMA number_list)?

/* 3 
   3, 
   3, 4
   3, 4, 5
   3, 4, 5,
*/


list ::= LSQBRACK number_list RSQBRACK |
         LSQBRACK RSQBRACK

statement ::=  IDENTIFIER EQ NUMBER |
               IDENTIFIER EQ IDENTIFIER |
               IDENTIFIER LSQBRACK NUMBER RSQBRACK |
               IDENTIFIER LSQBRACK NUMBER RSQBRACK EQ NUMBER
               ;

/* 

Next Steps:
1. Flesh out the rest of the levels.
   - Discuss with Prof. O
2. Develop grammar level by level
3. Test grammar incrementally

Level 1
i = 0
nums = [1, 2, 3]
nums[0] = 5
print(nums[0])
------------------------------------
Level 2
i = 0
i = i + 1
nums = [1, 2, 3]
nums[i] = nums[i - 1]
------------------------------------
Level 3




------------------------------------
Level 4




------------------------------------
Level 5




------------------------------------
Ultimate Level (Level 6)

Features:
- func definitions and calls
- loops (while / for)
- control flow
- basic arithmetic
- variable access
- array operations
- built in function calls (such as print(), len(), abs(), sum(), sorted() etc...)

Maybe:
- multiple assignments (a, b = 5, 6)
- visualize stack frames/heap

Excluded:
- classes
- exeception
- generators
- decorators
- dictionaries




*/
// {type:usecase}
// {direction:leftToRight}

//Rules for Inheritance

//Instructor inherits from Student
[Instructor]^[Student] 
[Content Creator]^[Instructor]

//Student
[Student]-(Run algorithm)
[Student]-(Save Instance)
[Student]-(Load Instance)
//[Student]-(Take quizzes)
[Student]-(View Results)
[Student]-(View documentation)
[Student]-(View leaderboard)
[Student]-(Earn achievements)
[Student]-(Select algorithm)
[Student]-(Register*)
[Student]-(Login*)
(Run algorithm) > (Step forward/back)
(Run algorithm) > (Bind index var)
// Types of steps to count:
// - Array read/write operations
// - Arithmetic / Logic (+ * - / && || ! ++ -- != == += -=)
// - Variable access
// - Total # of steps
// * nested tree of counts for read and write operations
(Run algorithm) > (Evaluate expression)
(Evaluate expression) < (Access element)
(Evaluate expression) < (Create var)
(Run algorithm) > (Toggle predict)
(Run algorithm) < (Predict)

(Predict) > (Variable change)
(Variable change) < (Element Change)
(Variable change) < (Index change)
// next line may need some clarification
(Predict) > (Next line)
(Predict) > (Count steps)
// refer to line 23

//Instructor
//[Instructor]-(Create quizzes)
[Instructor]-(Manage student progress)
[Instructor]-(Manage leaderboards)
[Instructor]-(Review student attempts)
[Instructor]-(Assign algorithms to students)

//Administrator
[Administrator]-(Manage system users and roles)
[Administrator]-(Configure database)
[Administrator]-(Integrate external connections)

//Content Creator
[Content Creator]-(Design new algorithms)

// include line numbers (non func requirement)

// Tech stack / "wireframe"
// Build potential grammar
// Text based.

// http://jsav.io/

// Grammar: (Python)
// assignment statement, list literal, basic arithmetic expressions,
// variable access, array subscripting (access)
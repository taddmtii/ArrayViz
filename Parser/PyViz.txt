/* 

Level 1

- variable assignment
- list literals
- list element access and assignment
- print (built in function)

i = 0
nums = [1, 2, 3]
nums[0] = 5
print(nums[0])
------------------------------------
Level 2

- basic arithmetic (+, -, *, /)
- expressions / expressions in subscripts

i = 0
i = i + 1
nums = [1, 2, 3]
nums[i] = nums[i - 1]
------------------------------------
Level 3

- control flow
- add methods for lists (append, sort, etc...)

x = 1
if x == 2:
   print(2)
else:
   print(1)

------------------------------------
Level 4

- simple for and while loops
- nested for loops 

i = 0
while i < 5:
   print(i)
   i = i + 1

for x in range(5):
   print(x)

nums = [1, 2, 3, 4, 5]
for n in nums:
   print(n)

nums1 = [1, 2, 3]
nums2 = [4, 5, 6]

for x in nums1:
   for y in nums2:
      print(x, y)
------------------------------------
Level 5

- function definitions and calls
- built in function calls

def one():
   return 1

def sub(a, b):
   return a - b

result_one = one() // 1 is stored in result_one variable
result_sub = sub(5, 3) // 2 is stored in result_sub

x = 5
neg_x = -5
nums = [2, 1, 3]
length = len(5)
absolute_val = abs(neg_x)
sum_of_nums = sum(nums)
sorted_nums = sorted(nums)

------------------------------------
Ultimate Level (Level 6)

Features:
- func definitions and calls
- loops (while / for)
- control flow
- basic arithmetic
- variable access
- array operations
- built in function calls (such as print(), len(), abs(), sum(), sorted() etc...)

Maybe:
- multiple assignments (a, b = 5, 6)
- visualize stack frames/heap

Excluded:
- classes
- exeception
- generators
- decorators
- dictionaries
- bitwise operators
- global variables / keyword


*/